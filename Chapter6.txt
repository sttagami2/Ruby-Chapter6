20200304
〜第6章〜

◆学習の目標
オブジェクトについてさらに詳しく学んでいく
4章で文字列型と数値型を学んだが、その他のオブジェクトを学ぶ

◆6章の目次
・数値
・文字列
・配列
・ハッシュ
・シンボル

ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
数値
・整数
・少数
数値はご存知の通り、「1」「200」「-100」「0」などの整数、「3.14」などの少数のこと

数値のメソッド
・+（足し算）
・-（引き算）
・/（割り算）
・*（掛け算）
・%（割り算のあまりの計算
ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
文字列
シングルクォーテーションやダブルクォーテーションで囲むことで、文字列として出力される
文字列の中に#{変数}と記述することで、{}内の変数の値を展開できる
	puts "Rubyを学習"		→	Rubyを学習
	name = "鈴木さん"
	puts "Hello" + name	→	Hello鈴木さん
	puts "こんにちは#{name}"	→	こんにちは鈴木さん
ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
配列
・配列を使うと、複数のデータをまとめて保存できる
・配列の各要素には、どのようなオブジェクトでも代入できる
・同じ配列の要素に異なった種類のオブジェクトを代入することも可能
・[]で記述

	names = ["Perl", "Ruby", "Python", "Swift"]
	puts names[1]					→	Ruby

※配列のデータは先頭から0, 1, 2というように「インデックス番号」が割り振られる
→開始番号は1ではなく、0であることを注意
データを呼び出す際は、配列名[インデックス番号]で記述する
ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
ハッシュ
・キーと値をセットで保存できるデータ
・{}で記述

配列では各要素にインデックス番号が割り振られる
ハッシュでは各要素に任意の値（キー）を割り振ることができる

	tall ={"太郎" => 185, "二郎" => 170, "花子" => 150}
	puts tall["太郎"]					→	185


ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
シンボル
・ハッシュと機能は同じ
・""の代わりに:で記述する

	tall = {:太郎 => 185, :二郎 => 170, :花子 => 150}
	puts tall[:花子]						→	150


〜田上的感想〜
ハッシュよりシンボルの方が記述するのが楽！
だけどなんとなく見た目はハッシュの方が見やすい気がする
ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー